package com.katsuraf.demoarchitecture.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.katsuraf.demoarchitecture.db.bean.PageStateEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAGE_STATE_ENTITY".
*/
public class PageStateEntityDao extends AbstractDao<PageStateEntity, Long> {

    public static final String TABLENAME = "PAGE_STATE_ENTITY";

    /**
     * Properties of entity PageStateEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ListType = new Property(1, int.class, "listType", false, "LIST_TYPE");
        public final static Property Timestamp = new Property(2, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Page = new Property(3, Integer.class, "page", false, "PAGE");
    }


    public PageStateEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PageStateEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAGE_STATE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LIST_TYPE\" INTEGER NOT NULL UNIQUE ," + // 1: listType
                "\"TIMESTAMP\" INTEGER," + // 2: timestamp
                "\"PAGE\" INTEGER);"); // 3: page
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAGE_STATE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PageStateEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getListType());
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(4, page);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PageStateEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getListType());
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(4, page);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PageStateEntity readEntity(Cursor cursor, int offset) {
        PageStateEntity entity = new PageStateEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // listType
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // timestamp
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PageStateEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setListType(cursor.getInt(offset + 1));
        entity.setTimestamp(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPage(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PageStateEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PageStateEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PageStateEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
